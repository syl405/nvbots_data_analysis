clear

% Script for importing data from the following text file:
%
%    D:\Dropbox (MIT)\Spring 2017\NVBOTS Dropbox\Summer\error_mapping_artifact\metrology_data\MAP1\parsed_raw_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/21 14:00:59

%% Initialize variables.
filename = 'D:\Dropbox (MIT)\Spring 2017\NVBOTS Dropbox\Summer\error_mapping_artifact\metrology_data\MAP1\parsed_raw_data_auto.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: categorical (%C)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%C%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
metrology_data = table(dataArray{1:end-1}, 'VariableNames', {'SpecimenCode','Flatness','Z','FeatureNumber','XYParallelism'});

%% Renumber feature numbers to be in sequence
metrology_data = sortrows(metrology_data,{'FeatureNumber'},{'ascend'}); %sort by feature number
metrology_data.FeatureNumber = (1:81)';

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

% Script for importing data from the following text file:
%
%    D:\Dropbox (MIT)\Spring 2017\NVBOTS Dropbox\Summer\error_mapping_artifact\metrology_data\MAP1\parsed_raw_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/21 14:00:59

%% Initialize variables.
filename = 'D:\Dropbox (MIT)\Spring 2017\NVBOTS Dropbox\Summer\error_mapping_artifact\metrology_data\MAP1\parse_raw_data_auto_verify.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: categorical (%C)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%C%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
metrology_data_ver = table(dataArray{1:end-1}, 'VariableNames', {'SpecimenCode','FeatureNumber','Flatness','Z','XYParallelism'});

%% Renumber feature numbers to be in sequence
metrology_data_ver = sortrows(metrology_data_ver,{'FeatureNumber'},{'ascend'}); %sort by feature number
metrology_data_ver.FeatureNumber = (1:81)';

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;


%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: D:\Dropbox (MIT)\Spring 2017\NVBOTS Dropbox\Summer\error_mapping_artifact\artifact_R1 - Variable Pattern Table - VarPattern.xlsx
%    Worksheet: Sheet1
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/21 14:04:43

%% Import the data
[~, ~, raw] = xlsread('D:\Dropbox (MIT)\Spring 2017\NVBOTS Dropbox\Summer\error_mapping_artifact\artifact_R1 - Variable Pattern Table - VarPattern.xlsx','Sheet1','A3:E83');

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Create table
design_data = table;

%% Allocate imported array to column variable names
design_data.FeatureNumber = (1:81)';
design_data.DesignX = data(:,3);
design_data.DesignY = 200 - data(:,4);
design_data.DesignZ = data(:,5);

%% Clear temporary variables
clearvars data raw;

rows = {[1 1 1 1 1 1 1 1 1];...
        [1 0 1 0 1 0 1 0 1];...
        [1 0 0 0 1 0 0 0 1];...
        [1 0 0 0 0 0 0 0 1]};
masks = cell(4,1);
for i = 1:numel(rows)
    mask = nan(9,9);
    mask(1,:) = rows{i}; %initialise as first row
    for j = 2:size(mask,2) %iterate over first row
        mask(j,:) = mask(1,j) * mask(1,:);
    end
    masks{i} = mask;
end


%% Fit models to error
lms = cell(4,1);
lms_ver = cell(4,1);

for i = 1:4
    lin_mask = reshape(logical(masks{i}),81,1);
    selected_design_data = design_data(lin_mask,:);
    selected_metrology_data = metrology_data(lin_mask,:);
    selected_ver_metrology_data = metrology_data_ver(lin_mask,:);
    selected_z_err = selected_metrology_data.Z - selected_design_data.DesignZ;
    selected_ver_z_err = selected_ver_metrology_data.Z - selected_design_data.DesignZ;
    predictors = [selected_design_data.DesignX selected_design_data.DesignY selected_design_data.DesignZ];
    predictors_ver = [selected_design_data.DesignX selected_design_data.DesignY selected_design_data.DesignZ];
    lms{i} = fitlm(predictors, selected_z_err ,'linear', 'VarNames', {'X','Y','Z','Error'},'Intercept',false);
    lms_ver{i} = fitlm(predictors_ver, selected_ver_z_err ,'linear', 'VarNames', {'X','Y','Z','Error'},'Intercept',false);
end

%% Compare estimated coefficients
coeffs_ver = nan(3,4); %dims: term, selected points
coeffs = nan(3,4);
for i = 1:4
    coeffs_ver(:,i) = lms_ver{i}.Coefficients.Estimate;
    coeffs(:,i) = lms{i}.Coefficients.Estimate;
end


%% Nested variance analysis
%[p,anova_tbl] = anovan(error,{design_data.DesignX,design_data.DesignY,design_data.DesignZ},'nested',[0 0 1; 0 0 1; 0 0 0]);