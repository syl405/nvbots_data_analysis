%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\shien\Documents\NVBOTS\data_analysis\PGK Data\column_experiment_remeasured_v3.xlsx
%    Worksheet: Sheet1
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2017/07/10 10:10:52

% Import the data
%================
[~, ~, raw] = xlsread('C:\Users\shien\Documents\NVBOTS\data_analysis\PGK Data\column_experiment_remeasured_v3.xlsx','Sheet1','A2:AH199');
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
stringVectors = string(raw(:,[1,2,5,6,7,10,12,15,16,17,18]));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[3,4,8,9,11,13,14,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]);

% Replace non-numeric cells with NaN
%================
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

% Create output variable
%================
data = reshape([raw{:}],size(raw));

% Create table
%================
R = table;

% Allocate imported array to column variable names
%================
R.name = categorical(stringVectors(:,1));
R.experiment = categorical(stringVectors(:,2));
R.number = data(:,1);
R.measurement_number = data(:,2);
R.printer = categorical(stringVectors(:,3));
R.location = categorical(stringVectors(:,4));
R.date = categorical(stringVectors(:,5));
R.time = data(:,3);
R.infill = data(:,4);
R.area = categorical(stringVectors(:,6));
R.Area = data(:,5);
R.material = categorical(stringVectors(:,7));
R.spool = data(:,6);
R.nozzle = data(:,7);
R.color = categorical(stringVectors(:,8));
R.quality = categorical(stringVectors(:,9));
R.structure = categorical(stringVectors(:,10));
R.operator = categorical(stringVectors(:,11));
R.desired_height = data(:,8);
R.nominal_height = data(:,9);
R.DP_expected = data(:,10);
R.layer_number = data(:,11);
R.nominal = data(:,12);
R.DP = data(:,13);
R.PL = data(:,14);
R.FL_LOW = data(:,15);
R.FL_HIGH = data(:,16);
R.quality_b = data(:,17);
R.xbar = data(:,18);
R.deltaxbar = data(:,19);
R.offset = data(:,20);
R.mean_DP = data(:,21);
R.mean_xbar = data(:,22);
R.mean_deltaxbar = data(:,23);

% Clear temporary variables
%================
clearvars data raw stringVectors;

%% Filter data to honeycomb infill, fast quality
%filter by infill
D = R(R.structure == 'Honeycomb',:);
%D = D(D.infill == 5,:);
D = D(D.quality == 'Quick',:);

%delete superfluous columns (can be found by lookup with sample number in R)
D.location = [];
D.experiment = [];
D.date = [];
D.time = [];
D.area = [];
D.Area = [];
D.material = [];
D.spool = [];
D.nozzle = [];
D.color = [];
D.quality = [];
D.structure = [];
D.operator = [];
D.desired_height = [];
D.DP_expected = [];
D.PL = [];
D.FL_LOW = [];
D.FL_HIGH = [];
D.quality_b = [];
D.xbar = [];
D.deltaxbar = [];
D.offset = [];
D.mean_DP = [];
D.mean_xbar = [];
D.mean_deltaxbar = [];

%split by repeated measurements
D1 = D(D.measurement_number == 1,:);
D2 = D(D.measurement_number == 2,:);
D3 = D(D.measurement_number == 3,:);

%convert to matrix (cols: sample num, build_height, fill_density, layer_num_in_step,
%nom_slice_thickness, measured_step_height)
D1_M = [D1.number D1.nominal_height D1.infill D1.layer_number D1.nominal D1.DP];
D2_M = [D2.number D2.nominal_height D2.infill D2.layer_number D2.nominal D2.DP];
D3_M = [D3.number D3.nominal_height D3.infill D3.layer_number D3.nominal D3.DP];

%% Calculate derived quantities and statistics
%average across calculations
D_M = cat(3,cat(3,D1_M,D2_M),D3_M);
mean_DP = mean(D_M(:,6,:),3);
std_DP = std(D_M(:,6,:),0,3);
range_DP = range(D_M(:,6,:),3);
mean_error_over_step = mean_DP - (D1_M(:,4).*D1_M(:,5));
mean_error_per_layer = mean_error_over_step ./ D1_M(:,4);
build_height = D1_M(:,2);
infill_density = D1_M(:,3);

%summarize data in new table
S = table(build_height,infill_density,mean_error_per_layer);

%% fit regression models to data
lm_lin = fitlm(S,'interactions','ResponseVar','mean_error_per_layer','PredictorVars',{'build_height','infill_density'});

%% calculate cumuluative error predictions
probe = 10:10:240;
cumul_errors = [];
for i = 1:numel(probe)
    cumul_error = 0;
    for j = 0:0.3:probe(i)
        predicted_error = predict(lm_lin,[j,5]); %5 pct infill density only
        cumul_error = cumul_error + predicted_error;
    end
    cumul_errors = [cumul_errors; cumul_error];
end

%%
% pred_layer_thickness_dev = @(x) -0.0017245 - 1.2492*10^-5*x;
% pred_layer_thickness = @(x) 0.3 + pred_layer_thickness_dev(x);
% pred_cumul_height = @(x) sum(pred_layer_thickness(0:0.3:x));
% 
% 240 - pred_cumul_height(240)